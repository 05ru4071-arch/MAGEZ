import os
import asyncio
from io import BytesIO
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from openpyxl import Workbook
from openpyxl.drawing.image import Image as XLImage
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side

# üîë –¢–æ–∫–µ–Ω
TOKEN = "7741928533:AAFDsO77wqRsWLTR7cu39UQDvqMc5MsyEw4"

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# üì¶ –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–≤–∞—Ä–æ–≤: user_id -> —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
user_data = {}

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class ProductForm(StatesGroup):
    waiting_for_photo = State()
    waiting_for_link = State()
    waiting_for_color = State()
    waiting_for_size = State()
    waiting_for_qty = State()
    waiting_for_comment = State()

class SaveExcel(StatesGroup):
    waiting_for_code = State()

class EditProduct(StatesGroup):
    choosing_product = State()
    choosing_field = State()
    updating_value = State()

class DeleteProduct(StatesGroup):
    choosing_product = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÇ –°–æ–∑–¥–∞—Ç—å Excel", callback_data="create_excel")],
        [InlineKeyboardButton(text="üìú –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞—Ä—Ö–∏–≤", callback_data="view_archive")]
    ])

# –ú–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏
def product_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_item")],
        [InlineKeyboardButton(text="‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä", callback_data="edit_item")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="delete_item")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å Excel", callback_data="finish_excel")]
    ])

# –ú–µ–Ω—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
def finish_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å Excel", callback_data="save_excel")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_products")]
    ])

# /start
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    user_data[message.from_user.id] = []
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@dp.callback_query()
async def menu_handler(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    if callback.data == "create_excel":
        user_data[user_id] = []
        await callback.message.answer("–°–æ–∑–¥–∞–Ω–∏–µ Excel. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=product_menu())

    elif callback.data == "add_item":
        await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª —Ç–æ–≤–∞—Ä–∞:")
        await state.set_state(ProductForm.waiting_for_photo)

    elif callback.data == "edit_item":
        if not user_data[user_id]:
            await callback.message.answer("–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç!")
            return
        kb = InlineKeyboardMarkup()
        for i, item in enumerate(user_data[user_id], start=1):
            kb.add(InlineKeyboardButton(text=f"{i}. {item['color']} | {item['size']}", callback_data=f"edit_{i-1}"))
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb)
        await state.set_state(EditProduct.choosing_product)

    elif callback.data == "delete_item":
        if not user_data[user_id]:
            await callback.message.answer("–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç!")
            return
        kb = InlineKeyboardMarkup()
        for i, item in enumerate(user_data[user_id], start=1):
            kb.add(InlineKeyboardButton(text=f"{i}. {item['color']} | {item['size']}", callback_data=f"del_{i-1}"))
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)
        await state.set_state(DeleteProduct.choosing_product)

    elif callback.data == "finish_excel":
        if not user_data[user_id]:
            await callback.message.answer("–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç!")
            return
        text = "üì¶ –¢–æ–≤–∞—Ä—ã:\n"
        for i, item in enumerate(user_data[user_id], start=1):
            text += f"{i}. {item['color']} | {item['size']} | {item['qty']} —à—Ç\n"
        await callback.message.answer(text, reply_markup=finish_menu())

    elif callback.data == "back_to_products":
        await callback.message.answer("–ú–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏:", reply_markup=product_menu())

    elif callback.data == "save_excel":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≥—Ä—É–∑–∞:")
        await state.set_state(SaveExcel.waiting_for_code)

    elif callback.data == "view_archive":
        user_folder = f"archive/{user_id}"
        if not os.path.exists(user_folder) or not os.listdir(user_folder):
            await callback.message.answer("–í–∞—à –∞—Ä—Ö–∏–≤ –ø—É—Å—Ç üìÇ")
        else:
            files = os.listdir(user_folder)
            text = "üìú –í–∞—à–∏ —Ñ–∞–π–ª—ã:\n" + "\n".join(files)
            await callback.message.answer(text)

# ----------------- –î–û–ë–ê–í–õ–ï–ù–ò–ï -----------------
@dp.message(ProductForm.waiting_for_photo)
async def process_photo(message: types.Message, state: FSMContext):
    if message.photo:
        file_id = message.photo[-1].file_id
    elif message.document:
        file_id = message.document.file_id
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª üì∑")
        return

    file = await bot.get_file(file_id)
    downloaded = await bot.download_file(file.file_path)
    await state.update_data(photo=downloaded.read())

    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä:")
    await state.set_state(ProductForm.waiting_for_link)

@dp.message(ProductForm.waiting_for_link)
async def process_link(message: types.Message, state: FSMContext):
    await state.update_data(link=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(ProductForm.waiting_for_color)

@dp.message(ProductForm.waiting_for_color)
async def process_color(message: types.Message, state: FSMContext):
    await state.update_data(color=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(ProductForm.waiting_for_size)

@dp.message(ProductForm.waiting_for_size)
async def process_size(message: types.Message, state: FSMContext):
    await state.update_data(size=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(ProductForm.waiting_for_qty)

@dp.message(ProductForm.waiting_for_qty)
async def process_qty(message: types.Message, state: FSMContext):
    try:
        qty = int(message.text.strip())
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return
    await state.update_data(qty=qty)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
    await state.set_state(ProductForm.waiting_for_comment)

@dp.message(ProductForm.waiting_for_comment)
async def process_comment(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await state.update_data(comment=message.text.strip())

    data = await state.get_data()
    product = {
        "photo": data["photo"],
        "link": data["link"],
        "color": data["color"],
        "size": data["size"],
        "qty": data["qty"],
        "comment": data["comment"]
    }

    user_data[user_id].append(product)

    await state.clear()
    await message.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=product_menu())

# ----------------- –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï -----------------
@dp.callback_query(EditProduct.choosing_product)
async def choose_product_to_edit(callback: types.CallbackQuery, state: FSMContext):
    idx = int(callback.data.split("_")[1])
    await state.update_data(edit_index=idx)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–§–æ—Ç–æ", callback_data="field_photo")],
        [InlineKeyboardButton(text="–°—Å—ã–ª–∫–∞", callback_data="field_link")],
        [InlineKeyboardButton(text="–¶–≤–µ—Ç", callback_data="field_color")],
        [InlineKeyboardButton(text="–†–∞–∑–º–µ—Ä", callback_data="field_size")],
        [InlineKeyboardButton(text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="field_qty")],
        [InlineKeyboardButton(text="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data="field_comment")]
    ])
    await callback.message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=kb)
    await state.set_state(EditProduct.choosing_field)

@dp.callback_query(EditProduct.choosing_field)
async def choose_field(callback: types.CallbackQuery, state: FSMContext):
    field = callback.data.split("_")[1]
    await state.update_data(field=field)
    if field == "photo":
        await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ/—Ñ–∞–π–ª:")
    else:
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
    await state.set_state(EditProduct.updating_value)

@dp.message(EditProduct.updating_value)
async def update_value(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = message.from_user.id
    idx = data["edit_index"]
    field = data["field"]

    if field == "photo":
        if message.photo:
            file_id = message.photo[-1].file_id
        elif message.document:
            file_id = message.document.file_id
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª üì∑")
            return
        file = await bot.get_file(file_id)
        downloaded = await bot.download_file(file.file_path)
        user_data[user_id][idx]["photo"] = downloaded.read()
    elif field == "qty":
        try:
            user_data[user_id][idx]["qty"] = int(message.text.strip())
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
            return
    else:
        user_data[user_id][idx][field] = message.text.strip()

    await state.clear()
    await message.answer("‚úÖ –¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=product_menu())

# ----------------- –£–î–ê–õ–ï–ù–ò–ï -----------------
@dp.callback_query(DeleteProduct.choosing_product)
async def delete_product(callback: types.CallbackQuery, state: FSMContext):
    idx = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    deleted = user_data[user_id].pop(idx)
    await state.clear()
    await callback.message.answer(f"üóë –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω: {deleted['color']} | {deleted['size']}", reply_markup=product_menu())

# ----------------- –°–û–•–†–ê–ù–ï–ù–ò–ï EXCEL -----------------
@dp.message(SaveExcel.waiting_for_code)
async def save_excel_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    code = message.text.strip()
    filename = f"{code}.xlsx"

    wb = Workbook()
    ws = wb.active

    # –®–∞–ø–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏
    ws.merge_cells("A1:F1")
    ws.merge_cells("A2:F2")

    cell1 = ws["A1"]
    cell1.value = "MAGEZ"
    cell1.font = Font(color="FFFFFF", bold=True, size=16)
    cell1.fill = PatternFill("solid", fgColor="FF0000")
    cell1.alignment = Alignment(horizontal="center", vertical="center")

    cell2 = ws["A2"]
    cell2.value = "–¢–æ—Ä–≥–æ–≤–æ-–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è"
    cell2.font = Font(color="FFFFFF", bold=True, size=12)
    cell2.fill = PatternFill("solid", fgColor="FF0000")
    cell2.alignment = Alignment(horizontal="center", vertical="center")

    # –°—Ç–∏–ª–∏
    header_fill = PatternFill("solid", fgColor="808080")
    header_font = Font(color="FFFFFF", bold=True)
    center_align = Alignment(horizontal="center", vertical="center", wrap_text=True)
    thin_border = Border(left=Side(style="thin"), right=Side(style="thin"), top=Side(style="thin"), bottom=Side(style="thin"))

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    headers = ["–§–æ—Ç–æ", "–°—Å—ã–ª–∫–∞", "–¶–≤–µ—Ç", "–†–∞–∑–º–µ—Ä", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]
    ws.append([])
    ws.append(headers)
    for col in range(1, 7):
        cell = ws.cell(row=4, column=col)
        cell.fill = header_fill
        cell.font = header_font
        cell.alignment = center_align
        cell.border = thin_border

    # –¢–æ–≤–∞—Ä—ã
    for i, item in enumerate(user_data[user_id], start=5):
        ws.cell(row=i, column=2).value = item["link"]
        ws.cell(row=i, column=3).value = item["color"]
        ws.cell(row=i, column=4).value = item["size"]
        ws.cell(row=i, column=5).value = item["qty"]
        ws.cell(row=i, column=6).value = item["comment"]

        for col in range(2, 7):
            cell = ws.cell(row=i, column=col)
            cell.alignment = center_align
            cell.border = thin_border

        if item["photo"]:
            img = XLImage(BytesIO(item["photo"]))
            img.width, img.height = 80, 80
            ws.add_image(img, f"A{i}")
            ws.row_dimensions[i].height = 60

    # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞
    for col in ws.columns:
        max_length = 0
        column = col[0].column_letter
        for cell in col:
            if cell.value:
                max_length = max(max_length, len(str(cell.value)))
        ws.column_dimensions[column].width = max_length + 5

    # –ê—Ä—Ö–∏–≤
    user_folder = f"archive/{user_id}"
    os.makedirs(user_folder, exist_ok=True)
    filepath = f"{user_folder}/{filename}"
    wb.save(filepath)

    await message.answer_document(InputFile(filepath))
    await message.answer("‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∞—Ä—Ö–∏–≤!", reply_markup=main_menu())
    await state.clear()

# üöÄ –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
