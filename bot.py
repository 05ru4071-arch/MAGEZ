import os
import asyncio
from io import BytesIO
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from aiogram.filters import Command
from openpyxl import Workbook
from openpyxl.drawing.image import Image as XLImage
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side

TOKEN = "–¢–û–ö–ï–ù_–¢–í–û–ï–ì–û_–ë–û–¢–ê"

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–≤–∞—Ä–æ–≤: user_id -> —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
user_data = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÇ –°–æ–∑–¥–∞—Ç—å Excel", callback_data="create_excel")],
        [InlineKeyboardButton(text="üìú –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞—Ä—Ö–∏–≤", callback_data="view_archive")]
    ])
    return kb

# –ú–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏
def product_menu():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_item")],
        [InlineKeyboardButton(text="‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä", callback_data="edit_item")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="delete_item")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å Excel", callback_data="finish_excel")]
    ])
    return kb

# –ú–µ–Ω—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
def finish_menu():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å Excel", callback_data="save_excel")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_products")]
    ])
    return kb

# /start
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    user_data[message.from_user.id] = []
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é
@dp.callback_query()
async def menu_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    if callback.data == "create_excel":
        user_data[user_id] = []
        await callback.message.answer("–°–æ–∑–¥–∞–Ω–∏–µ Excel. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=product_menu())

    elif callback.data == "add_item":
        await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª —Ç–æ–≤–∞—Ä–∞:")
        dp.message.register(file_handler, user_id=user_id)

    elif callback.data == "finish_excel":
        if not user_data[user_id]:
            await callback.message.answer("–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç!")
            return
        text = "üì¶ –¢–æ–≤–∞—Ä—ã:\n"
        for i, item in enumerate(user_data[user_id], start=1):
            text += f"{i}. {item['color']} | {item['size']} | {item['qty']} —à—Ç\n"
        await callback.message.answer(text, reply_markup=finish_menu())

    elif callback.data == "back_to_products":
        await callback.message.answer("–ú–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏:", reply_markup=product_menu())

    elif callback.data == "save_excel":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≥—Ä—É–∑–∞:")
        dp.message.register(save_excel_name, user_id=user_id)

    elif callback.data == "view_archive":
        user_folder = f"archive/{user_id}"
        if not os.path.exists(user_folder) or not os.listdir(user_folder):
            await callback.message.answer("–í–∞—à –∞—Ä—Ö–∏–≤ –ø—É—Å—Ç üìÇ")
        else:
            files = os.listdir(user_folder)
            text = "üìú –í–∞—à–∏ —Ñ–∞–π–ª—ã:\n" + "\n".join(files)
            await callback.message.answer(text)

# –ü—Ä–∏—ë–º —Ñ–æ—Ç–æ/—Ñ–∞–π–ª–æ–≤
async def file_handler(message: types.Message):
    user_id = message.from_user.id

    if message.photo:
        file_id = message.photo[-1].file_id
    elif message.document:
        file_id = message.document.file_id
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª üì∑")
        return

    file = await bot.get_file(file_id)
    downloaded = await bot.download_file(file.file_path)
    file_bytes = downloaded.read()

    product = {
        "photo": file_bytes,
        "link": "https://–ø—Ä–∏–º–µ—Ä.—Å—Å—ã–ª–∫–∞",
        "color": "–∫—Ä–∞—Å–Ω—ã–π",
        "size": "M",
        "qty": 1,
        "comment": "–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"
    }

    user_data[user_id].append(product)
    await message.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=product_menu())

# –°–æ—Ö—Ä–∞–Ω—è–µ–º Excel
async def save_excel_name(message: types.Message):
    user_id = message.from_user.id
    code = message.text.strip()
    filename = f"{code}.xlsx"

    wb = Workbook()
    ws = wb.active

    # --- –®–∞–ø–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ ---
    ws.merge_cells("A1:F1")
    ws.merge_cells("A2:F2")

    cell1 = ws["A1"]
    cell1.value = "MAGEZ"
    cell1.font = Font(color="FFFFFF", bold=True, size=16)
    cell1.fill = PatternFill("solid", fgColor="FF0000")
    cell1.alignment = Alignment(horizontal="center", vertical="center")

    cell2 = ws["A2"]
    cell2.value = "–¢–æ—Ä–≥–æ–≤–æ-–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è"
    cell2.font = Font(color="FFFFFF", bold=True, size=12)
    cell2.fill = PatternFill("solid", fgColor="FF0000")
    cell2.alignment = Alignment(horizontal="center", vertical="center")

    # --- –°—Ç–∏–ª–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã ---
    header_fill = PatternFill("solid", fgColor="808080")
    header_font = Font(color="FFFFFF", bold=True)
    center_align = Alignment(horizontal="center", vertical="center", wrap_text=True)
    thin_border = Border(
        left=Side(style="thin"),
        right=Side(style="thin"),
        top=Side(style="thin"),
        bottom=Side(style="thin")
    )

    # --- –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã ---
    headers = ["–§–æ—Ç–æ", "–°—Å—ã–ª–∫–∞", "–¶–≤–µ—Ç", "–†–∞–∑–º–µ—Ä", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]
    ws.append([])
    ws.append(headers)
    for col, name in enumerate(headers, start=1):
        cell = ws.cell(row=4, column=col)
        cell.fill = header_fill
        cell.font = header_font
        cell.alignment = center_align
        cell.border = thin_border

    # --- –¢–æ–≤–∞—Ä—ã ---
    for i, item in enumerate(user_data[user_id], start=5):
        ws.cell(row=i, column=2).value = item["link"]
        ws.cell(row=i, column=3).value = item["color"]
        ws.cell(row=i, column=4).value = item["size"]
        ws.cell(row=i, column=5).value = item["qty"]
        ws.cell(row=i, column=6).value = item["comment"]

        for col in range(2, 7):
            cell = ws.cell(row=i, column=col)
            cell.alignment = center_align
            cell.border = thin_border

        if item["photo"]:
            img = XLImage(BytesIO(item["photo"]))
            img.width, img.height = 80, 80
            ws.add_image(img, f"A{i}")
            ws.row_dimensions[i].height = 60

    # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
    for col in ws.columns:
        max_length = 0
        column = col[0].column_letter
        for cell in col:
            if cell.value:
                max_length = max(max_length, len(str(cell.value)))
        ws.column_dimensions[column].width = max_length + 5

    # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∞—Ä—Ö–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    user_folder = f"archive/{user_id}"
    os.makedirs(user_folder, exist_ok=True)
    filepath = f"{user_folder}/{filename}"
    wb.save(filepath)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer_document(InputFile(filepath))
    await message.answer("‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∞—Ä—Ö–∏–≤!", reply_markup=main_menu())

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
