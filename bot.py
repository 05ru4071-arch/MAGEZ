# bot.py
# -*- coding: utf-8 -*-
"""
Telegram –±–æ—Ç (aiogram 3.x) —Å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–º–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º–∏, –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é (inline),
FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏ —ç–∫—Å–ø–æ—Ä—Ç–æ–º –≤ Excel —Å –Ω—É–∂–Ω—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º.
–ü–æ–¥ Replit –∏ GitHub. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ (—ç—Ç–æ—Ç), –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Äî –≤ JSON/–ø–∞–ø–∫–∞—Ö.

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
- TELEGRAM_BOT_TOKEN=<–≤–∞—à —Ç–æ–∫–µ–Ω –∏–∑ BotFather>
- ADMIN_IDS=123456789,987654321   (—Å–ø–∏—Å–æ–∫ Telegram ID –∞–¥–º–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)

–ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ:
    pip install -r requirements.txt
    python bot.py

–ê–≤—Ç–æ—Ä: –≤–∞—à –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ Python :)
"""
import asyncio
import os
import json
import io
import math
import textwrap
from datetime import datetime
from pathlib import Path
from typing import List, Dict, Any, Optional

from aiogram import Bot, Dispatcher, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from openpyxl import Workbook
from openpyxl.styles import Alignment, Font, PatternFill, Border, Side
from openpyxl.drawing.image import Image as XLImage
from PIL import Image as PILImage, UnidentifiedImageError

# ---------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã/–ø—É—Ç–∏ ----------
BASE_DIR = Path(__file__).parent
DATA_DIR = BASE_DIR / "data"
TMP_DIR = DATA_DIR / "tmp"
INVITES_FILE = DATA_DIR / "invites.json"
USERS_FILE = DATA_DIR / "authorized_users.json"
ARCHIVE_DIR = BASE_DIR / "archive"

# –°–æ–∑–¥–∞—ë–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
for p in [DATA_DIR, TMP_DIR, ARCHIVE_DIR]:
    p.mkdir(parents=True, exist_ok=True)

# ---------- –£—Ç–∏–ª–∏—Ç—ã JSON ----------
def load_json(path: Path, default):
    if not path.exists():
        return default
    try:
        with path.open("r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return default

def save_json(path: Path, data):
    path.parent.mkdir(parents=True, exist_ok=True)
    with path.open("w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# ---------- –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏ –¥–æ—Å—Ç—É–ø ----------
def get_admin_ids() -> List[int]:
    raw = os.getenv("ADMIN_IDS", "").strip()
    ids = []
    for part in raw.split(","):
        part = part.strip()
        if part.isdigit():
            ids.append(int(part))
    return ids

def is_admin(user_id: int) -> bool:
    return user_id in get_admin_ids()

def list_invites() -> List[Dict[str, Any]]:
    return load_json(INVITES_FILE, [])

def save_invites(invites: List[Dict[str, Any]]):
    save_json(INVITES_FILE, invites)

def create_invite_codes(count: int) -> List[str]:
    import secrets
    invites = list_invites()
    existing = {item["code"] for item in invites}
    new_codes = []
    while len(new_codes) < count:
        code = secrets.token_urlsafe(8).replace("_", "").replace("-", "")
        if code not in existing:
            new_codes.append(code)
            invites.append({"code": code, "used": False, "used_by": None, "used_at": None})
            existing.add(code)
    save_invites(invites)
    return new_codes

def mark_invite_used(code: str, user_id: int):
    invites = list_invites()
    changed = False
    for item in invites:
        if item["code"] == code and not item.get("used"):
            item["used"] = True
            item["used_by"] = user_id
            item["used_at"] = datetime.utcnow().isoformat()
            changed = True
            break
    if changed:
        save_invites(invites)

def is_valid_invite(code: str) -> bool:
    for item in list_invites():
        if item["code"] == code and not item.get("used"):
            return True
    return False

def list_authorized_users() -> List[int]:
    return load_json(USERS_FILE, [])

def save_authorized_users(uids: List[int]):
    save_json(USERS_FILE, uids)

def is_authorized(user_id: int) -> bool:
    return user_id in list_authorized_users()

def authorize_user(user_id: int):
    users = list_authorized_users()
    if user_id not in users:
        users.append(user_id)
        save_authorized_users(users)

# ---------- –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ ----------
class Item:
    def __init__(self):
        self.photo_path: Optional[str] = None  # –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        self.link: Optional[str] = None
        self.color: Optional[str] = None
        self.size: Optional[str] = None
        self.qty: Optional[int] = None
        self.comment: Optional[str] = None

    def to_dict(self):
        return {
            "photo_path": self.photo_path,
            "link": self.link,
            "color": self.color,
            "size": self.size,
            "qty": self.qty,
            "comment": self.comment
        }

    @classmethod
    def from_dict(cls, d: Dict[str, Any]):
        it = cls()
        it.photo_path = d.get("photo_path")
        it.link = d.get("link")
        it.color = d.get("color")
        it.size = d.get("size")
        it.qty = d.get("qty")
        it.comment = d.get("comment")
        return it

    def short(self) -> str:
        parts = []
        if self.link: parts.append(f"üîó {self.link}")
        if self.color: parts.append(f"üé® {self.color}")
        if self.size: parts.append(f"üìè {self.size}")
        if self.qty is not None: parts.append(f"üì¶ {self.qty}")
        if self.comment: parts.append(f"üí¨ {self.comment}")
        if self.photo_path: parts.append(f"üñº {Path(self.photo_path).name}")
        return " | ".join(parts) if parts else "(–ø—É—Å—Ç–æ)"

# ---------- FSM ----------
class AddItemStates(StatesGroup):
    waiting_photo = State()
    waiting_link = State()
    waiting_color = State()
    waiting_size = State()
    waiting_qty = State()
    waiting_comment = State()

class EditFieldStates(StatesGroup):
    choosing_item = State()
    choosing_field = State()
    editing_value = State()

class SaveExcelStates(StatesGroup):
    confirm_list = State()
    waiting_cargo_code = State()

# ---------- –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ–∞–Ω—Å–æ–≤ (–≤ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞) ----------
# –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã ‚Äî –≤ –ø–∞–º—è—Ç–∏. –í –ø—Ä–æ–¥–µ –ª—É—á—à–µ –ë–î.
USER_ITEMS: Dict[int, List[Item]] = {}     # user_id -> —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
EDIT_CONTEXT: Dict[int, Dict[str, Any]] = {}  # user_id -> {"index": int, "field": str}

# ---------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------
def main_menu_kb() -> types.InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="üìÇ –°–æ–∑–¥–∞—Ç—å Excel", callback_data="create_excel")
    kb.button(text="üìú –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞—Ä—Ö–∏–≤", callback_data="view_archive")
    kb.adjust(1)
    return kb.as_markup()

def post_add_menu_kb() -> types.InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_item")
    kb.button(text="‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä", callback_data="edit_item")
    kb.button(text="üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="delete_item")
    kb.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å Excel", callback_data="finalize_excel")
    kb.adjust(1)
    return kb.as_markup()

def items_list_kb(user_id: int, action_prefix: str) -> types.InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    items = USER_ITEMS.get(user_id, [])
    if not items:
        kb.button(text="(—Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç)", callback_data="noop")
    else:
        for idx, it in enumerate(items):
            label = f"{idx+1}. {it.short()[:64]}"
            kb.button(text=label, callback_data=f"{action_prefix}:{idx}")
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_post_add")
    kb.adjust(1)
    return kb.as_markup()

def edit_fields_kb() -> types.InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    for f, label in [
        ("photo", "–§–æ—Ç–æ"),
        ("link", "–°—Å—ã–ª–∫–∞"),
        ("color", "–¶–≤–µ—Ç"),
        ("size", "–†–∞–∑–º–µ—Ä"),
        ("qty", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"),
        ("comment", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"),
    ]:
        kb.button(text=label, callback_data=f"edit_field:{f}")
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_choose_item")
    kb.adjust(2)
    return kb.as_markup()

def save_or_back_kb() -> types.InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å Excel", callback_data="save_excel")
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_post_add")
    kb.adjust(1)
    return kb.as_markup()

# ---------- –ü–æ–º–æ—â–Ω–∏–∫–∏ ----------
async def ensure_authorized(event: types.TelegramObject, bot: Bot) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –ø–æ–¥—Å–∫–∞–∑–∫—É. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True/False."""
    user = event.from_user
    if user is None:
        return False
    if is_authorized(user.id) or is_admin(user.id):
        return True
    # –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    text = ("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é.\n"
            "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /start <–∫–æ–¥>")
    if isinstance(event, types.Message):
        await event.answer(text)
    elif isinstance(event, types.CallbackQuery):
        await event.message.answer(text)
    return False

def get_user_tmp_dir(user_id: int) -> Path:
    p = TMP_DIR / str(user_id)
    p.mkdir(parents=True, exist_ok=True)
    return p

def get_user_archive_dir(user_id: int) -> Path:
    p = ARCHIVE_DIR / str(user_id)
    p.mkdir(parents=True, exist_ok=True)
    return p

def clear_user_tmp(user_id: int):
    p = get_user_tmp_dir(user_id)
    for child in p.glob("*"):
        try:
            if child.is_file():
                child.unlink()
        except Exception:
            pass

def human_file_list(dir_path: Path) -> List[Path]:
    return sorted([p for p in dir_path.glob("*.xlsx")], key=lambda x: x.stat().st_mtime, reverse=True)

def center_alignment():
    return Alignment(horizontal="center", vertical="center", wrap_text=True)

def border_thin():
    thin = Side(style="thin", color="000000")
    return Border(left=thin, right=thin, top=thin, bottom=thin)

def fit_image_to_cell(img_path: Path, target_w_px: int, target_h_px: int) -> PILImage:
    img = PILImage.open(img_path)
    img.thumbnail((target_w_px, target_h_px), PILImage.LANCZOS)
    return img

def pixels_to_excel_width(px: int) -> float:
    # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ px -> column width (—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ)
    # –®–∏—Ä–∏–Ω–∞ 1 = ~7 –ø–∏–∫—Å–µ–ª–µ–π —Ç–µ–∫—Å—Ç–∞ Calibri 11.
    return max(10.0, px / 7.0)

def best_col_width(values: List[str], min_width: float = 12.0, max_width: float = 60.0) -> float:
    # –ü—Ä–∏–º–µ—Ä–Ω–æ –æ—Ü–µ–Ω–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –ø–æ –¥–ª–∏–Ω–µ —Ç–µ–∫—Å—Ç–∞
    max_len = max((len(v) for v in values if v), default=0)
    width = max(min_width, min(max_width, max_len * 1.2))
    return width

# ---------- Excel –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ----------
def build_excel(user_id: int, cargo_code: str, items: List[Item]) -> Path:
    user_dir = get_user_archive_dir(user_id)
    safe_code = "".join([c for c in cargo_code if c.isalnum() or c in ("-", "_")]) or f"cargo_{datetime.now():%Y%m%d_%H%M%S}"
    filename = f"{safe_code}.xlsx"
    out_path = user_dir / filename

    wb = Workbook()
    ws = wb.active
    ws.title = "–ó–∞–∫–∞–∑"

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–ø–∫–∏ (—Å—Ç—Ä–æ–∫–∏ 1-2, –∫—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω, –±–µ–ª—ã–π –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç, –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ)
    header_fill = PatternFill("solid", fgColor="FF0000")  # –∫—Ä–∞—Å–Ω—ã–π
    header_font = Font(b=True, color="FFFFFF", size=14)

    ws.merge_cells("A1:F1")
    ws.merge_cells("A2:F2")
    ws["A1"] = "MAGEZ"
    ws["A2"] = "–¢–æ—Ä–≥–æ–≤–æ-–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è"
    for row in (1, 2):
        cell = ws[f"A{row}"]
        cell.fill = header_fill
        cell.font = header_font
        cell.alignment = center_alignment()
        ws.row_dimensions[row].height = 24

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å 4-–π —Å—Ç—Ä–æ–∫–∏
    start_row = 4
    headers = ["–§–æ—Ç–æ", "–°—Å—ã–ª–∫–∞", "–¶–≤–µ—Ç", "–†–∞–∑–º–µ—Ä", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"]
    header_fill_gray = PatternFill("solid", fgColor="808080")
    header_font_white = Font(b=True, color="FFFFFF")

    for col, name in enumerate(headers, start=1):
        cell = ws.cell(row=start_row, column=col, value=name)
        cell.fill = header_fill_gray
        cell.font = header_font_white
        cell.alignment = center_alignment()
        cell.border = border_thin()
    ws.row_dimensions[start_row].height = 24

    # –î–∞–Ω–Ω—ã–µ
    row = start_row + 1
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    # –ü—Ä–∏–º–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫–∏ 100 px –¥–ª—è —Ñ–æ—Ç–æ; Excel –≤—ã—Å–æ—Ç–∞ ~ 0.75 * px
    photo_row_height_px = 120
    photo_row_height_points = photo_row_height_px * 0.75
    ws.column_dimensions["A"].width = pixels_to_excel_width(140)

    # –°–æ–±–µ—Ä—ë–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
    col_values = {i: [] for i in range(1, 7)}
    for it in items:
        col_values[2].append(it.link or "")
        col_values[3].append(it.color or "")
        col_values[4].append(it.size or "")
        col_values[5].append(str(it.qty) if it.qty is not None else "")
        col_values[6].append(it.comment or "")

    for it in items:
        ws.row_dimensions[row].height = photo_row_height_points
        # –§–æ—Ç–æ / —Ñ–∞–π–ª
        if it.photo_path and Path(it.photo_path).exists():
            img_path = Path(it.photo_path)
            placed = False
            try:
                # –ü–æ–¥–≥–æ–Ω–∏–º –ø–æ —Ä–∞–∑–º–µ—Ä—É —è—á–µ–π–∫–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ)
                target_w_px = 140
                target_h_px = photo_row_height_px
                pil_img = fit_image_to_cell(img_path, target_w_px, target_h_px)
                buf = io.BytesIO()
                pil_img.save(buf, format="PNG")
                buf.seek(0)
                xl_img = XLImage(buf)
                cell_addr = f"A{row}"
                ws.add_image(xl_img, cell_addr)
                # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –∏ –≥—Ä–∞–Ω–∏—Ü—ã —è—á–µ–π–∫–∏ —Ç–æ–∂–µ –ø–æ—Å—Ç–∞–≤–∏–º
                cell = ws.cell(row=row, column=1, value=None)
                cell.alignment = center_alignment()
                cell.border = border_thin()
                placed = True
            except UnidentifiedImageError:
                placed = False
            if not placed:
                # –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ‚Äî –ø–∏—à–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                cell = ws.cell(row=row, column=1, value=img_path.name)
                cell.alignment = center_alignment()
                cell.border = border_thin()
        else:
            cell = ws.cell(row=row, column=1, value="‚Äî")
            cell.alignment = center_alignment()
            cell.border = border_thin()

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        vals = [it.link, it.color, it.size, it.qty, it.comment]
        for i, v in enumerate(vals, start=2):
            cell = ws.cell(row=row, column=i, value=v if v is not None else "")
            cell.alignment = center_alignment()
            cell.border = border_thin()
        row += 1

    # –ê–≤—Ç–æ-—à–∏—Ä–∏–Ω–∞ (–ø—Ä–∏–º–µ—Ä–Ω–∞—è)
    ws.column_dimensions["B"].width = best_col_width(col_values[2], 20, 80)
    ws.column_dimensions["C"].width = best_col_width(col_values[3], 14, 40)
    ws.column_dimensions["D"].width = best_col_width(col_values[4], 14, 30)
    ws.column_dimensions["E"].width = best_col_width([str(x) for x in col_values[5]], 12, 16)
    ws.column_dimensions["F"].width = best_col_width(col_values[6], 20, 80)

    wb.save(out_path)
    return out_path

# ---------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ----------
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise SystemExit("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# ---------- –•—ç–Ω–¥–ª–µ—Ä—ã ----------

# /start —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
@dp.message(CommandStart(deep_link=True))
async def start_deeplink(message: types.Message):
    code = message.text.split(maxsplit=1)
    code = code[1].strip() if len(code) > 1 else ""
    user_id = message.from_user.id

    if is_authorized(user_id) or is_admin(user_id):
        await message.answer("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
        return

    if code and is_valid_invite(code):
        authorize_user(user_id)
        mark_invite_used(code, user_id)
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é.\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
    else:
        await message.answer(
            "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é.\n"
            "–ü–æ–ª—É—á–∏—Ç–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/start –ö–û–î</code>"
        )

# /start –±–µ–∑ –∫–æ–¥–∞
@dp.message(CommandStart())
async def start(message: types.Message):
    if not await ensure_authorized(message, bot):
        return
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞: —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
@dp.message(Command("new_invite"))
async def cmd_new_invite(message: types.Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    # /new_invite 3  -> —Å–æ–∑–¥–∞—Ç—å 3 –∫–æ–¥–∞
    parts = message.text.split()
    count = 1
    if len(parts) > 1 and parts[1].isdigit():
        count = max(1, min(50, int(parts[1])))
    codes = create_invite_codes(count)
    text = "–°–æ–∑–¥–∞–Ω—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\n" + "\n".join([f"<code>{c}</code>" for c in codes])
    await message.answer(text)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: –∫–Ω–æ–ø–∫–∏
@dp.callback_query(F.data == "create_excel")
async def cb_create_excel(callback: types.CallbackQuery, state: FSMContext):
    if not await ensure_authorized(callback, bot):
        return
    user_id = callback.from_user.id
    USER_ITEMS.setdefault(user_id, [])
    clear_user_tmp(user_id)
    await callback.message.edit_text(
        "–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã. –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –Ω–∏–∂–µ.",
        reply_markup=post_add_menu_kb()
    )

@dp.callback_query(F.data == "view_archive")
async def cb_view_archive(callback: types.CallbackQuery):
    if not await ensure_authorized(callback, bot):
        return
    user_id = callback.from_user.id
    files = human_file_list(get_user_archive_dir(user_id))
    if not files:
        await callback.message.edit_text("–í –≤–∞—à–µ–º –∞—Ä—Ö–∏–≤–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤.", reply_markup=main_menu_kb())
        return

    # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    kb = InlineKeyboardBuilder()
    for f in files[:50]:
        kb.button(text=f.name, callback_data=f"send_file:{f.name}")
    kb.button(text="üîô –í –º–µ–Ω—é", callback_data="back_to_menu")
    kb.adjust(1)
    await callback.message.edit_text("–í–∞—à –∞—Ä—Ö–∏–≤:", reply_markup=kb.as_markup())

@dp.callback_query(F.data.startswith("send_file:"))
async def cb_send_file(callback: types.CallbackQuery):
    if not await ensure_authorized(callback, bot):
        return
    user_id = callback.from_user.id
    name = callback.data.split(":", 1)[1]
    path = get_user_archive_dir(user_id) / name
    if not path.exists():
        await callback.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    await callback.message.answer_document(types.FSInputFile(path))
    await callback.answer()

@dp.callback_query(F.data == "back_to_menu")
async def cb_back_to_menu(callback: types.CallbackQuery):
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())

# --- –ü–æ—Å—Ç-–º–µ–Ω—é (–ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è Excel) ---
@dp.callback_query(F.data == "add_item")
async def cb_add_item(callback: types.CallbackQuery, state: FSMContext):
    if not await ensure_authorized(callback, bot):
        return
    await state.set_state(AddItemStates.waiting_photo)
    await callback.message.edit_text("–®–∞–≥ 1/6 ‚Äî –ø—Ä–∏—à–ª–∏—Ç–µ –§–æ—Ç–æ (–º–æ–∂–Ω–æ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç).")

@dp.message(AddItemStates.waiting_photo, F.photo | F.document)
async def add_photo(message: types.Message, state: FSMContext):
    if not await ensure_authorized(message, bot):
        return
    user_id = message.from_user.id
    tmp_dir = get_user_tmp_dir(user_id)

    file_id = None
    filename = None
    is_image = False

    if message.photo:
        # –ë–µ—Ä—ë–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        file_id = message.photo[-1].file_id
        filename = f"photo_{message.photo[-1].file_unique_id}.jpg"
        is_image = True
    elif message.document:
        file_id = message.document.file_id
        filename = message.document.file_name or f"file_{message.document.file_unique_id}"
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–Ω—è—Ç—å, –ø–æ—Ö–æ–∂–µ –ª–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if (message.document.mime_type or "").startswith("image/"):
            is_image = True

    if not file_id:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª, –ø—Ä–∏—à–ª–∏—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    save_path = tmp_dir / filename
    try:
        await bot.download(file_id, destination=save_path)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return

    # –°–æ–∑–¥–∞—ë–º –∑–∞–≥–æ—Ç–æ–≤–∫—É Item –∏ –¥–µ—Ä–∂–∏–º –µ—ë –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(photo_path=str(save_path))
    await state.set_state(AddItemStates.waiting_link)
    await message.answer("–®–∞–≥ 2/6 ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É.")

@dp.message(AddItemStates.waiting_link)
async def add_link(message: types.Message, state: FSMContext):
    if not await ensure_authorized(message, bot):
        return
    await state.update_data(link=message.text.strip())
    await state.set_state(AddItemStates.waiting_color)
    await message.answer("–®–∞–≥ 3/6 ‚Äî —É–∫–∞–∂–∏—Ç–µ —Ü–≤–µ—Ç.")

@dp.message(AddItemStates.waiting_color)
async def add_color(message: types.Message, state: FSMContext):
    if not await ensure_authorized(message, bot):
        return
    await state.update_data(color=message.text.strip())
    await state.set_state(AddItemStates.waiting_size)
    await message.answer("–®–∞–≥ 4/6 ‚Äî —É–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä.")

@dp.message(AddItemStates.waiting_size)
async def add_size(message: types.Message, state: FSMContext):
    if not await ensure_authorized(message, bot):
        return
    await state.update_data(size=message.text.strip())
    await state.set_state(AddItemStates.waiting_qty)
    await message.answer("–®–∞–≥ 5/6 ‚Äî —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—á–∏—Å–ª–æ).")

@dp.message(AddItemStates.waiting_qty)
async def add_qty(message: types.Message, state: FSMContext):
    if not await ensure_authorized(message, bot):
        return
    txt = (message.text or "").strip()
    try:
        qty = int(txt)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.")
        return
    await state.update_data(qty=qty)
    await state.set_state(AddItemStates.waiting_comment)
    await message.answer("–®–∞–≥ 6/6 ‚Äî –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ - –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞).")

@dp.message(AddItemStates.waiting_comment)
async def add_comment(message: types.Message, state: FSMContext):
    if not await ensure_authorized(message, bot):
        return
    comment = message.text.strip()
    if comment == "-":
        comment = ""
    data = await state.get_data()
    it = Item()
    it.photo_path = data.get("photo_path")
    it.link = data.get("link")
    it.color = data.get("color")
    it.size = data.get("size")
    it.qty = data.get("qty")
    it.comment = comment

    user_id = message.from_user.id
    USER_ITEMS.setdefault(user_id, []).append(it)
    await state.clear()

    await message.answer(
        "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ",
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=post_add_menu_kb()
    )

# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ---
@dp.callback_query(F.data == "edit_item")
async def cb_edit_item(callback: types.CallbackQuery, state: FSMContext):
    if not await ensure_authorized(callback, bot):
        return
    user_id = callback.from_user.id
    if not USER_ITEMS.get(user_id):
        await callback.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.", show_alert=True)
        return
    await state.set_state(EditFieldStates.choosing_item)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=items_list_kb(user_id, "choose_to_edit"))

@dp.callback_query(EditFieldStates.choosing_item, F.data.startswith("choose_to_edit:"))
async def cb_choose_item_for_edit(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    idx_str = callback.data.split(":")[1]
    try:
        idx = int(idx_str)
    except:
        await callback.answer("–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞.", show_alert=True)
        return
    EDIT_CONTEXT[user_id] = {"index": idx}
    await state.set_state(EditFieldStates.choosing_field)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=edit_fields_kb())

@dp.callback_query(EditFieldStates.choosing_field, F.data.startswith("edit_field:"))
async def cb_choose_field(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    field = callback.data.split(":")[1]
    ctx = EDIT_CONTEXT.get(user_id, {})
    if "index" not in ctx:
        await callback.answer("–ù–µ –≤—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä.", show_alert=True)
        return
    ctx["field"] = field
    EDIT_CONTEXT[user_id] = ctx

    if field == "photo":
        await state.set_state(EditFieldStates.editing_value)
        await callback.message.edit_text("–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ/—Ñ–∞–π–ª –¥–ª—è —Ç–æ–≤–∞—Ä–∞.")
    elif field == "qty":
        await state.set_state(EditFieldStates.editing_value)
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—á–∏—Å–ª–æ).")
    else:
        await state.set_state(EditFieldStates.editing_value)
        await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è ¬´{field}¬ª. (–∏–ª–∏ - —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å)")

@dp.message(EditFieldStates.editing_value, F.photo | F.document)
async def edit_field_file(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    ctx = EDIT_CONTEXT.get(user_id, {})
    field = ctx.get("field")
    if field != "photo":
        await message.answer("–û–∂–∏–¥–∞–ª–æ—Å—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return

    tmp_dir = get_user_tmp_dir(user_id)
    if message.photo:
        file_id = message.photo[-1].file_id
        filename = f"photo_{message.photo[-1].file_unique_id}.jpg"
    else:
        file_id = message.document.file_id
        filename = message.document.file_name or f"file_{message.document.file_unique_id}"

    save_path = tmp_dir / filename
    try:
        await bot.download(file_id, destination=save_path)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return

    items = USER_ITEMS.get(user_id, [])
    idx = ctx.get("index", -1)
    if 0 <= idx < len(items):
        items[idx].photo_path = str(save_path)
        await message.answer("–§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    else:
        await message.answer("–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=post_add_menu_kb())

@dp.message(EditFieldStates.editing_value)
async def edit_field_text(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    ctx = EDIT_CONTEXT.get(user_id, {})
    field = ctx.get("field")
    items = USER_ITEMS.get(user_id, [])
    idx = ctx.get("index", -1)

    if not (0 <= idx < len(items)):
        await message.answer("–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=post_add_menu_kb())
        return

    value = message.text.strip()
    if value == "-":
        value = ""

    if field == "qty":
        try:
            value = int(value)
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.")
            return

    if field in ("link", "color", "size", "qty", "comment"):
        setattr(items[idx], field if field != "qty" else "qty", value)
        await message.answer("–ó–Ω–∞—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ.")

    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=post_add_menu_kb())

# --- –£–¥–∞–ª–µ–Ω–∏–µ ---
@dp.callback_query(F.data == "delete_item")
async def cb_delete_item(callback: types.CallbackQuery):
    if not await ensure_authorized(callback, bot):
        return
    user_id = callback.from_user.id
    if not USER_ITEMS.get(user_id):
        await callback.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.", show_alert=True)
        return
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=items_list_kb(user_id, "choose_to_delete"))

@dp.callback_query(F.data.startswith("choose_to_delete:"))
async def cb_choose_to_delete(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    idx_str = callback.data.split(":")[1]
    try:
        idx = int(idx_str)
    except:
        await callback.answer("–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞.", show_alert=True)
        return
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete:{idx}")
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_post_add")
    kb.adjust(1)
    await callback.message.edit_text(f"–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä #{idx+1}?", reply_markup=kb.as_markup())

@dp.callback_query(F.data.startswith("confirm_delete:"))
async def cb_confirm_delete(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    idx = int(callback.data.split(":")[1])
    items = USER_ITEMS.get(user_id, [])
    if 0 <= idx < len(items):
        removed = items.pop(idx)
        await callback.message.edit_text("–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω.", reply_markup=post_add_menu_kb())
    else:
        await callback.answer("–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

# --- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ Excel ---
@dp.callback_query(F.data == "finalize_excel")
async def cb_finalize_excel(callback: types.CallbackQuery, state: FSMContext):
    if not await ensure_authorized(callback, bot):
        return
    user_id = callback.from_user.id
    items = USER_ITEMS.get(user_id, [])
    if not items:
        await callback.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.", show_alert=True)
        return
    # –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞
    lines = []
    for i, it in enumerate(items, 1):
        lines.append(f"<b>{i}.</b> {it.short()}")
    text = "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n" + "\n".join(lines)
    await state.set_state(SaveExcelStates.confirm_list)
    await callback.message.edit_text(text, reply_markup=save_or_back_kb())

@dp.callback_query(SaveExcelStates.confirm_list, F.data == "save_excel")
async def cb_save_excel_ask_code(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(SaveExcelStates.waiting_cargo_code)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≥—Ä—É–∑–∞ (–æ–Ω –±—É–¥–µ—Ç –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞).")

@dp.message(SaveExcelStates.waiting_cargo_code)
async def save_excel_do(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    code = (message.text or "").strip()
    if not code:
        await message.answer("–ö–æ–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≥—Ä—É–∑–∞.")
        return
    items = USER_ITEMS.get(user_id, [])
    path = build_excel(user_id, code, items)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
    await message.answer_document(types.FSInputFile(path), caption=f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∞—Ä—Ö–∏–≤: {path.name}")
    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ —Å–ø–∏—Å–∫–∞
    clear_user_tmp(user_id)
    USER_ITEMS[user_id] = []

    await state.clear()
    await message.answer("–ì–æ—Ç–æ–≤–æ! –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_kb())

# --- –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥ ---
@dp.callback_query(F.data == "back_to_post_add")
async def cb_back_post_add(callback: types.CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=post_add_menu_kb())

@dp.callback_query(F.data == "back_choose_item")
async def cb_back_choose_item(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    await state.set_state(EditFieldStates.choosing_item)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=items_list_kb(user_id, "choose_to_edit"))

@dp.callback_query(F.data == "noop")
async def cb_noop(callback: types.CallbackQuery):
    await callback.answer()

# --- –§–æ–ª–±—ç–∫ –Ω–∞ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ "–º–µ–Ω—é" ---
@dp.message(Command("menu"))
async def cmd_menu(message: types.Message):
    if not await ensure_authorized(message, bot):
        return
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())

# ---------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ----------
async def main():
    print("Bot started...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("Bot stopped.")
